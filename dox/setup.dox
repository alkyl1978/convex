/** @page getstarted Getting Started

You already installed PROS?  Then go here.
- \subpage install_p6 "Installing after PROS"

Quick Start
-----------
-  Install GCC ARM toolchain.\n
-  Install GCC Make.\n
-  Install CortexFlash download utility.\n
-  Install ChibiOS/RT\n
-  Install ConVEX\n
-  Change to the demo project and type make\n
-  Download to the cortex using cortexFlash\n
 
Step by step guide:
-------------------
- \subpage install_p1 "Installing the ARM toolchain"
- \subpage install_p2 "Installing ChibiOS/RT"
- \subpage install_p3 "Installing ConVEX"
- \subpage install_p4 "Installing CortexFlash"
- \subpage install_p5 "Installing Eclipse"
*/

/**
@page install_p1 Installing the ARM toolchain
@tableofcontents

@section install_p1_1 Installing the ARM compiler
  
  You need an ARM cross compiler to use ConVEX under Windows or OSX.
  The compiler and its companion programs are know as a toolchain, 
  these are commercially available but we will use the free GNU version.
  It's possible to build the GCC ARM toolchain from scratch but it's easier 
  to use a pre-built version.  I tested ConVEX using two different ones, 
  Sourcery CodeBench Lite and Yagarto.

  Sourcery Codebench is maintained by Mentor Graphics, they have three editions 
  in addition to the command line only Lite version ranging in price from $99 for 
  an Academic version to $3000 for the full professional one with all the bells and whistles.

  Sourcery Lite can be found here <a href="http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/">sourcery-codebench-lite</a>

  The version we need is the EABI release for ARM processors.

  You need to register and then they will send a link where it can be downloaded.

  Yagarto stands for Yet another GNU ARM Toolchain, the web site for this development is here.

  <a href="http://www.yagarto.org/">www.yagarto.org</a>

  The work on this project was finished a couple of years ago and I'm not sure if they will continue
  building releases using the latest GNU source code, however, I find it a little easier to install than Sourcery.

  The toolchain installers are here.
  
  Windows.\n
  <a href="http://sourceforge.net/projects/yagarto/files/YAGARTO%20for%20Windows/">sourceforge.net/projects/yagarto/files/YAGARTO for Windows</a>
  
  OSX.\n
  <a href="http://sourceforge.net/projects/yagarto/files/YAGARTO%20for%20Mac%20OS%20X/">sourceforge.net/projects/yagarto/files/YAGARTO for Mac OSX</a>

  The install process is pretty simple, just accept the defaults and allow the installer
  to update the PATH environmental variable.
 
@image  html "yagarto_install_1.jpg" Install screen 1
@image  html "yagarto_install_2.jpg" Install screen 2
@image  html "yagarto_install_3.jpg" Install screen 3
@image  html "yagarto_install_4.jpg" Install screen 4

@section install_p1_2 Installing the build utilities
  
  If you don't have the standard utilities installed like make, sh, rm, cp and mkdir
  then Yagarto also has a simplified subset that can be installed from here.

  Windows\n
  <a href="http://www.emb4fun.de/download/arm/yagarto/yagarto-tools-20121018-setup.exe">yagarto-tools-20121018-setup.exe</a>

  Again, the install process is pretty simple, just accept the defaults and allow the installer
  to update the PATH envirinmental variable.

@image  html "yagarto_tools_install_1.jpg" Install screen 1
@image  html "yagarto_tools_install_2.jpg" Install screen 2
@image  html "yagarto_tools_install_3.jpg" Install screen 3
@image  html "yagarto_tools_install_4.jpg" Install screen 4
  
  
  OSX\n
  You probably need the OSX developer tools

  Bottom line is that you need the make utility, check from the command line in a shell if you have it installed.

@verbatim
	>make --version
	GNU Make 3.81
	Copyright (C) 2006  Free Software Foundation, Inc.
	This is free software; see the source for copying conditions.
	There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
	PARTICULAR PURPOSE.
@endverbatim

  If I've lost you at this point then ConVEX is probably not for you.

  There's a bit more information on installing bare metal toolchains here.\n
  <a href="http://www.emb4fun.de/archive/gabmt/index.html">www.emb4fun.de</a>  

@ref install_p2 "Next page"  
*/

/** @page install_p2 Installing ChibiOS/RT
  Installing ChibiOS is as simple as downloading the archived source and expanding into
  a suitable location on your hard drive.
  
  ChibiOS version 2.6 is not included as part of the ConVEX download.  These instructions are still valid
  but you can skip this and head straight to the next section.  After downloading the ConVEX repo just
  expand the ChibiOS zip file in the same location next to the vex subdirectory.
  <B>(edit 28 August 2013, ChibiOS 2.6 is now included as a zip file as part of the convex download)</B>
  
  @ref install_p3
  
  The ChibiOS homepage is here.\n
  <a href="http://www.chibios.org">http://www.chibios.org</a>
  
  and can be downloaded from sourceforge from here.\n
  <a href="http://sourceforge.net/projects/chibios/">http://sourceforge.net/projects/chibios/</a>
  
  For windows I suggest making a top level directory for all ConVEX development, I would avoid a
  path with spaces as these always seem to cause problems.  I used the following path.\n
  C:/projects
  
  This could also be your eclipse workspace as ChibiOS and the convex files need to be there for the eclipse build to work.
  
  Place the ChibiOS zip file under this directory and unzip. It will create a file hierarchy something like this.\n
  
  C:/Projects\n
  C:/Projects/ChibiOS_2.6.0\n
  C:/Projects/ChibiOS_2.6.0/boards\n
  C:/Projects/ChibiOS_2.6.0/demos\n
  C:/Projects/ChibiOS_2.6.0/docs\n
  C:/Projects/ChibiOS_2.6.0/ext\n
  C:/Projects/ChibiOS_2.6.0/os\n
  C:/Projects/ChibiOS_2.6.0/test\n
  C:/Projects/ChibiOS_2.6.0/testhal\n
  C:/Projects/ChibiOS_2.6.0/tools\n
  C:/Projects/ChibiOS_2.6.0/documentation.html\n
  C:/Projects/ChibiOS_2.6.0/exception.txt\n
  C:/Projects/ChibiOS_2.6.0/license.txt\n
  C:/Projects/ChibiOS_2.6.0/readme.txt\n
 
  You can test that ChibiOS and the toolchain are working without installing ConVEX.
  Choose a demo and compile using make, for example, make the ARMCM3-STM32F103 demo.

@verbatim
$ cd C:/Projects/ChibiOS_2.6.0/demos/ARMCM3-STM32F103

$ make clean
Cleaning
rm -fR .dep build
Done

$ make
Compiler Options
arm-none-eabi-gcc -c -mcpu=cortex-m3 -O2 -ggdb -fomit-frame-pointer -falign-functions=16 -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/lst/ -DTHUMB_PRESENT -mno-thumb-interwork -DTHUMB_NO_INTERWORKING -MD -MP -MF .dep/build.d -I. -I../../os/ports/common/ARMCMx/CMSIS/include -I../../os/ports/common/ARMCMx -I../../os/ports/GCC/ARMCMx -I../../os/ports/GCC/ARMCMx/STM32F1xx -I../../os/kernel/include -I../../test -I../../os/hal/include -I../../os/hal/platforms/STM32F1xx -I../../os/hal/platforms/STM32 -I../../os/hal/platforms/STM32/GPIOv1 -I../../os/hal/platforms/STM32/I2Cv1 -I../../os/hal/platforms/STM32/RTCv1 -I../../os/hal/platforms/STM32/SPIv1 -I../../os/hal/platforms/STM32/USARTv1 -I../../os/hal/platforms/STM32/USBv1 -I../../boards/OLIMEX_STM32_P103 -I../../os/various main.c -o main.o

mkdir -p build/obj
mkdir -p build/lst
Compiling crt0.c
Compiling vectors.c
Compiling chcore.c
Compiling chcore_v7m.c
Compiling nvic.c
Compiling chsys.c
Compiling chdebug.c
Compiling chlists.c
Compiling chvt.c
Compiling chschd.c
Compiling chthreads.c
Compiling chdynamic.c
Compiling chregistry.c
Compiling chsem.c
Compiling chmtx.c
Compiling chcond.c
Compiling chevents.c
Compiling chmsg.c
Compiling chmboxes.c
Compiling chqueues.c
Compiling chmemcore.c
Compiling chheap.c
Compiling chmempools.c
Compiling test.c
Compiling testthd.c
Compiling testsem.c
Compiling testmtx.c
Compiling testmsg.c
Compiling testmbox.c
Compiling testevt.c
Compiling testheap.c
Compiling testpools.c
Compiling testdyn.c
Compiling testqueues.c
Compiling testbmk.c
Compiling hal.c
Compiling adc.c
Compiling can.c
Compiling ext.c
Compiling gpt.c
Compiling i2c.c
Compiling icu.c
Compiling mac.c
Compiling mmc_spi.c
Compiling mmcsd.c
Compiling pal.c
Compiling pwm.c
Compiling rtc.c
Compiling sdc.c
Compiling serial.c
Compiling serial_usb.c
Compiling spi.c
Compiling tm.c
Compiling uart.c
Compiling usb.c
Compiling stm32_dma.c
Compiling hal_lld.c
Compiling adc_lld.c
Compiling ext_lld_isr.c
Compiling can_lld.c
Compiling ext_lld.c
Compiling gpt_lld.c
Compiling icu_lld.c
Compiling mac_lld.c
Compiling pwm_lld.c
Compiling sdc_lld.c
Compiling pal_lld.c
Compiling i2c_lld.c
Compiling rtc_lld.c
Compiling spi_lld.c
Compiling serial_lld.c
Compiling uart_lld.c
Compiling usb_lld.c
Compiling board.c
Compiling evtimer.c
Compiling syscalls.c
Compiling main.c
main.c: In function 'Thread1':
main.c:35:1: warning: no return statement in function returning non-void [-Wreturn-type]
Linking build/ch.elf
Creating build/ch.hex
Creating build/ch.bin
Creating build/ch.dmp
Done
@endverbatim

@ref install_p3 "Next page"
*/

/** @page install_p3 Installing ConVEX
  Download the ConVEX package from the <a href="https://github.com/jpearman/convex">github project page</a> or as a zip file from here.
  
  <a href="https://github.com/jpearman/convex/archive/master.zip">ConVEX zip file</a>
  
  Unzip the ConVEX archive and move the "convex" folder into the project directory created when
  installing ChibiOS, for example.\n
  
  C:/Projects

  The file hierarchy should be like this.\n
  
  C:/Projects\n
  C:/Projects/convex\n
  C:/Projects/convex/cortex\n
  C:/Projects/convex/cortex/boards\n
  C:/Projects/convex/cortex/fw\n
  C:/Projects/convex/cortex/ld\n
  C:/Projects/convex/cortex/opt\n
  C:/Projects/convex/cortex/projects\n
  C:/Projects/convex/cortex/exception.txt\n
  C:/Projects/convex/cortex/license.txt\n
  
  The top level C:/Projects folder should now have two subdirectories, ChibiOS_2.6.0 and convex.
  
  The test project can be built using the installed ARM toolchain from the command line.  Change into the 
  test project directory and build as follows.

@verbatim  
$ cd C:Projects/convex/cortex/projects/TestProject

$ make clean
Cleaning
rm -fR .dep build
Done

$ make
Compiler Options
arm-none-eabi-gcc -c -mcpu=cortex-m3 -O2 -ggdb -fomit-frame-pointer -falign-functions=16 -ffunction-sections -fdata-sections -fno-common -Wall -Wextra -Wstrict-prototypes -Wa,-alms=build/lst/ -DTHUMB_PRESENT -mno-thumb-interwork -DTHUMB_NO_INTERWORKING -MD -MP -MF .dep/build.d -I. -I../../../../ChibiOS_2.6.0/os/ports/common/ARMCMx/CMSIS/include -I../../../../ChibiOS_2.6.0/os/ports/common/ARMCMx -I../../../../ChibiOS_2.6.0/os/ports/GCC/ARMCMx -I../../../../ChibiOS_2.6.0/os/ports/GCC/ARMCMx/STM32F1xx -I../../../../ChibiOS_2.6.0/os/kernel/include -I../../../../ChibiOS_2.6.0/os/hal/include -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32F1xx -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32 -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32/GPIOv1 -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32/I2Cv1 -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32/RTCv1 -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32/SPIv1 -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32/USARTv1 -I../../../../ChibiOS_2.6.0/os/hal/platforms/STM32/USBv1 -I../../boards/VEX_STM32_CORTEX -I../../../../ChibiOS_2.6.0/os/various -I../../fw -I../../opt main.c -o main.o

mkdir -p bin/obj
mkdir -p bin/lst
Compiling crt0.c
Compiling vectors.c
Compiling chcore.c
Compiling chcore_v7m.c
Compiling nvic.c
Compiling chsys.c
Compiling chdebug.c
Compiling chlists.c
Compiling chvt.c
Compiling chschd.c
Compiling chthreads.c
Compiling chdynamic.c
Compiling chregistry.c
Compiling chsem.c
Compiling chmtx.c
Compiling chcond.c
Compiling chevents.c
Compiling chmsg.c
Compiling chmboxes.c
Compiling chqueues.c
Compiling chmemcore.c
Compiling chheap.c
Compiling chmempools.c
Compiling hal.c
Compiling adc.c
Compiling can.c
Compiling ext.c
Compiling gpt.c
Compiling i2c.c
Compiling icu.c
Compiling mac.c
Compiling mmc_spi.c
Compiling mmcsd.c
Compiling pal.c
Compiling pwm.c
Compiling rtc.c
Compiling sdc.c
Compiling serial.c
Compiling serial_usb.c
Compiling spi.c
Compiling tm.c
Compiling uart.c
Compiling usb.c
Compiling stm32_dma.c
Compiling hal_lld.c
Compiling adc_lld.c
Compiling ext_lld_isr.c
Compiling can_lld.c
Compiling ext_lld.c
Compiling gpt_lld.c
Compiling icu_lld.c
Compiling mac_lld.c
Compiling pwm_lld.c
Compiling sdc_lld.c
Compiling pal_lld.c
Compiling i2c_lld.c
Compiling rtc_lld.c
Compiling spi_lld.c
Compiling serial_lld.c
Compiling uart_lld.c
Compiling usb_lld.c
Compiling board.c
Compiling evtimer.c
Compiling syscalls.c
Compiling chprintf.c
Compiling vexshell.c
Compiling vexcortex.c
Compiling vexdigital.c
Compiling vexconfig.c
Compiling vexext.c
Compiling vexencoder.c
Compiling vexsonar.c
Compiling vexmotor.c
Compiling vexspi.c
Compiling vexlcd.c
Compiling vexanalog.c
Compiling vexctl.c
Compiling vexime.c
Compiling vexprintf.c
Compiling vexaudio.c
Compiling vexrttl.c
Compiling vexsensor.c
Compiling vextest.c
Compiling vexuser.c
Compiling main.c
Linking bin/output.elf
Creating bin/output.hex
Creating bin/output.bin
Creating bin/output.dmp
Done
@endverbatim

@ref install_p4 "Next page"
*/

/** @page install_p4 Installing CortexFlash

The cortexFlash utility is a single executable file available 
for both Windows and OSX.  It is one method of downloading the compiled binary
to the cortex.  Purdue college has recently released the PROS IDE, if you are using this then it includes
a java based cortex flash utility which can be used as an alternative.

cortexFlash can be downloaded from the <a href="https://github.com/jpearman/stm32flashCortex">github project page.</a>

The utility can be placed in any convenient location on the PC, you will need to modify the
PATH environment variable if you want to run it from the command line without
giving the full executable path.

Usage is as follows.

@verbatim
Usage: cortexflash [-bvngfhc] [-[rw] filename] [comport]
       -b rate         Baud rate (default 115200)
       -X              Enter VEX user program mode
       -X1             Enter VEX user program mode using C9 commands
       -X2             Enter VEX user program mode using old style RTS control
       -r filename     Read flash to file
       -w filename     Write flash to file
       -u              Disable the flash write-protection
       -e n            Only erase n pages before writing the flash
       -v              Verify writes
       -n count        Retry failed writes up to count times (default 10)
       -g address      Start execution at specified address (0 = flash start)
       -f              Force binary parser
       -h              Show this help
       -c              Resume the connection (don't send initial INIT)
                       *Baud rate must be kept the same as the first init*
                       This is useful if the reset fails

Examples:
       Get device information:
       cortexflash -X COM4

       Write with verify and then start execution:
       cortexflash -X -w filename -v -g 0x0 COM4

       Read flash to file:
       cortexflash -X -r filename COM4
@endverbatim

The default output file name that ConVEX creates is output.hex.  Here is an example of downloading
a test project that shows correct operation of the program.

@verbatim
$cortexflash -X -w C:/Projects/convex/cortex/projects/TestProject-Clawbot/bin/output.hex COM4
VEX cortex flash loader

Using Parser : Intel HEX
Send bootloader start command
Serial Config: 115200 8E1
Version      : 0x22
Option 1     : 0x00
Option 2     : 0x00
Device ID    : 0x0414 (High-density)
RAM          : 64KiB  (512b reserved by bootloader)
Flash        : 384KiB (sector size: 2x2048)
Option RAM   : 15b
System RAM   : 2KiB

Wrote address 0x0800b778 (100.00%)
@endverbatim

The utility can be added as an external tool if using eclipse.  The screen grab below shows how cortexFlash
was added for one of the demo projects,

@image  html "cortexflash_eclipse.jpg"

@ref install_p5 "Next page"
*/

/** @page install_p5 Installing eclipse
  
  Download Eclipse for C/C++ developers from the eclipse web site.
  
  <a href="http://www.eclipse.org/downloads/">www.eclipse.org/downloads</a>
  
  I have been testing under V3.7 (Indigo) as I did not like the subsequent version.  I now
  see that a new version (4.3, Keplar) is the latest but, although it should work, I have not
  done any testing under that environment yet.
  
  You will need a Java Runtime Environment (JRE) to run eclipse, this can be obtained from
  Oracle if you do not already have it installed.
  
  <a href="http://www.java.com/en/download/index.jsp">Java download</a>

  The Java installer has this annoying habit of wanting to install some web browser plugins so
  be sure to uncheck the optional installs if you don't want them.

  I'm not planning on writing any tutorials on using Eclipse.  A prerequisite for using the ConVEX 
  library is a certain familiarity with tools like Eclipse, if these tools look complicated then, as I said before,
  ConVEX is probably not something you should be using, stick to ROBOTC (or EasyC if that's all you have).  
  
  Information on using eclipse with ChibiOS/RT can be found here.
  
  <a href="http://www.chibios.org/dokuwiki/doku.php?id=chibios:guides:eclipse2">Setting up eclipse for ChibiOS/RT</a>\n

  Ignore all the parts concerning debugging, unless you have a JTAG debug interface and know
  where to plug it in inside the cortex then it's not applicable.
  
  If you previously installed ChibiOS and convex under c:/Projects then create a new workspace at that
  location when starting eclipse.
  
  A new plugin is now available that simplifies the process of making a new ConVEX project.  Drag the plugin from
  the convex/plugins folder to the eclipse plugins folder and restart eclipse to activate.  The plugin is used
  when new->project->other is selected from the file menu in eclipse.
  
  If you create ConVEX projects in a location other than the default you will need to modify the paths to the
  ChibiOS and convex subdirectories in the setup.mk file.

  @verbatim
  # uncomment these if running from default project location
  # Path to ChibiOS
  #CHIBIOS    = ../ChibiOS_2.6.0
  # Path to convex
  #CONVEX     = ../convex/cortex

  # uncomment to use the optional code like the smart motor library
  #CONVEX_OPT  = yes

  # User C code files
  VEXUSERSRC = vexuser.c
  
  # Uncomment and add/modify user include files
  #VEXUSERINC = myfile.h
  @endverbatim

  This file also needs to contain any user "c" and header files that are added.  Sorry for the awkward process but
  I wanted it to remain close to the default ChibiOS make system so future ChibiOS updates work without
  modification.
*/

/** @page install_p6 Installing ConVEX with PROS

  If PROS is already installed, the toolchain and flash utility included with that will work with ConVEX.  There is 
  a small problem with the make utility that ships with PROS on windows, it runs slowly with ConVEX due to the large
  number of dependencies.  you may still wish to install yagarto tools and modify the windows PATH variable so the make
  utility included with yagarto is used instead of the PROS make utility.
  
  The ChibiOS_2.6.0 and convex folders should be placed into the workspace that is being used for PROS.  The default workspace
  (on OSX) would be /Users/yourname/Documents/pros, you would now have /Users/yourname/Documents/pros/ChibiOS_2.6.0 and
  /Users/yourname/Documents/pros/convex.

  There are three ways to install the "new ConVEX project" plugin.  As PROS is usually installed with root (admin) ownership
  you will need to run PROS as root for any of these to work.

  On Linux use\n
  sudo /opt/pros/ccide
  
  On Windows 7, run pros as adminstrator.
  
  On OSX, if your account is an administrator account, software install will usually work, otherwise run as;\n
  sudo /Applications/PROS/PROS
  
  Best.
  Use the install new software feature of eclipse and go to the update site.
  http://jpearman.github.io/convex/eclipse/update-site

  or
  Use the install new software feature of eclipse, use the Add button and
  then select the local archive in this folder, eclipse_plugin_archive.zip

  or
  move the raw plugin to the eclipse (or PROS) plugins folder.
  You may then need to restart eclipse with admin privileges before using
  as a standard user
  
  A shortcut for the "New ConVEX project" wizzard is not available but it can be accessed from New->project.. under
  the "VEX Cortex" folder along with the "New PROS Project" wizard.  You can also customize the PROS perspective
  and add the "New ConVEX project" wizard under the Window->customize perspective... menu and then the "Menu Visibility"
  tab.
  
  The PROS flash uploader does not work if eclipse finds any errors.  Turn of Task tags (preferences->C/C++) as
  these are detected by the uploader as errors and will abort the upload.
  
  See also some of the other information on eclipse here @ref install_p5 "Installing eclipse"
  
*/